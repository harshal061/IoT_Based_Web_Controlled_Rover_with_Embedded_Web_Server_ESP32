#include <WiFi.h>
#include <WebServer.h>
#include <ESPmDNS.h> // For mDNS
#include <WiFiManager.h> // WiFiManager library

// Motor control pins
#define motor1F 27
#define motor1B 14
#define motor2F 13
#define motor2B 12

WebServer server(80); // Web server on port 80

void setup() {
  Serial.begin(9600);

  // Initialize pins
  pinMode(motor1F, OUTPUT);
  pinMode(motor1B, OUTPUT);
  pinMode(motor2F, OUTPUT);
  pinMode(motor2B, OUTPUT);

  // Start WiFi Manager
  WiFiManager wifiManager;

  // Optional: Reset saved Wi-Fi credentials
  wifiManager.resetSettings();

  // Automatically connect using previously saved Wi-Fi credentials
  // If none are found, starts AP mode for configuration
  if (!wifiManager.autoConnect("ESP32-Config")) {
    Serial.println("Failed to connect and hit timeout");
    ESP.restart();
  }

  // Print connected Wi-Fi details
  Serial.println("Connected to Wi-Fi!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Start mDNS responder
  if (MDNS.begin("esp32")) { // Replace "esp32" with your hostname
    Serial.println("mDNS responder started. Access the ESP32 at: http://esp32.local");
  } else {
    Serial.println("Error starting mDNS responder!");
  }

  // Define HTTP routes
  server.on("/", handleRoot);
  server.on("/forward", []() {
    forward();
    server.send(200, "text/plain", "Moving FORWARD");
  });
  server.on("/backward", []() {
    backward();
    server.send(200, "text/plain", "Moving BACKWARD");
  });
  server.on("/right", []() {
    right();
    server.send(200, "text/plain", "Turning RIGHT");
  });
  server.on("/left", []() {
    left();
    server.send(200, "text/plain", "Turning LEFT");
  });
  server.on("/stop", []() {
    stop();
    server.send(200, "text/plain", "Motors STOPPED");
  });

  // Start web server
  server.begin();
}

void loop() {
  server.handleClient();
}

// HTML Page
void handleRoot() {
  String html = R"rawliteral(
  <!DOCTYPE html>
  <html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Button Controller</title>
    <style>  
        body { background-color: #282c34; color: white; text-align: center; font-family: Arial, sans-serif; margin: 0; padding: 0; }
        header { padding: 20px; background-color: #444; }
        h1 { margin: 0; }
        main { margin-top: 20px; }
        .button { padding: 20px 40px; color: white; border: none; border-radius: 5px; font-size: 24px; margin: 10px; cursor: pointer; }
        .button-forward { background-color: #007bff; }
        .button-backward { background-color: #28a745; }
        .button-right { background-color: #ffc107; }
        .button-left { background-color: #dc3545; }
        .button-stop { background-color: #6c757d; }
    </style>
  </head>
  <body>
    <header><h1>Button Controller</h1></header> 
    <main>
        <button class="button button-forward" onclick="sendCommand('forward')">Forward</button>
        <button class="button button-backward" onclick="sendCommand('backward')">Backward</button>
        <button class="button button-right" onclick="sendCommand('right')">Right</button>
        <button class="button button-left" onclick="sendCommand('left')">Left</button>
        <button class="button button-stop" onclick="sendCommand('stop')">Stop</button>
    </main>  
    <script>
        function sendCommand(command) {
            fetch('/' + command)
            .then(response => response.text())
            .then(data => {
                console.log(command + " sent");
            })
            .catch(error => console.error("Error:", error));
        }
    </script>
  </body>
  </html>
  )rawliteral";
  server.send(200, "text/html", html);
}

// Motor Control Functions
void forward() {
  digitalWrite(motor1F, HIGH);
  digitalWrite(motor1B, LOW);
  digitalWrite(motor2F, HIGH);
  digitalWrite(motor2B, LOW);
}

void backward() {
  digitalWrite(motor1F, LOW);
  digitalWrite(motor1B, HIGH);
  digitalWrite(motor2F, LOW);
  digitalWrite(motor2B, HIGH);
}

void right() {
  digitalWrite(motor1F, HIGH);
  digitalWrite(motor1B, LOW);
  digitalWrite(motor2F, LOW);
  digitalWrite(motor2B, HIGH);
}

void left() {
  digitalWrite(motor1F, LOW);
  digitalWrite(motor1B, HIGH);
  digitalWrite(motor2F, HIGH);
  digitalWrite(motor2B, LOW);
}

void stop() {
  digitalWrite(motor1F, LOW);
  digitalWrite(motor1B, LOW);
  digitalWrite(motor2F, LOW);
  digitalWrite(motor2B, LOW);
}
